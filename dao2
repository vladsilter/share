import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.SessionFactory;
import org.hibernate.Session;

//CLASSE SINGLETON PER LA CONNESSIONE AL DB
public class Dao {
	private static SessionFactory sessionFactory = null;
	//private static Session session = null;

	private Dao(){
//		final StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
//				.configure() // configures settings from hibernate.cfg.xml
//				.build();
		Configuration configuration = new Configuration().configure();
		StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder()
				.applySettings(configuration.getProperties());
		
		//System.out.println("registry built: "+registry.toString());
		System.out.println("builder built: "+builder.toString());
		
		try {
			//sessionFactory = new MetadataSources( registry ).buildMetadata().buildSessionFactory();
			sessionFactory = configuration.buildSessionFactory(builder.build());
			System.out.println("we have a session factory: "+sessionFactory);
		}
		catch (Exception e) {
			// The registry would be destroyed by the SessionFactory, but we had trouble building the SessionFactory
			// so destroy it manually.
			System.out.println("no session factory: "+sessionFactory);
			//StandardServiceRegistryBuilder.destroy( registry );
		}
		
		
		

	}

	public static SessionFactory getSessionFactory() {
		if(sessionFactory==null) {
			new Dao();
		}
/*
		try {
			session = sessionFactory.openSession();
			System.out.println("we have a session: "+session);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
*/
		return sessionFactory;
	}
/*
	public static void closeSession() {
		try {
			session.close();
			System.out.println("session closed");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
*/
	protected void tearDown() throws Exception {
		if ( sessionFactory != null ) {
			sessionFactory.close();
		}
	}

}
